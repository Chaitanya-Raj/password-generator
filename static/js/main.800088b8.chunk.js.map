{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","password","setPassword","isUppercase","setIsUppercase","isLowercase","setIsLowercase","isNumber","setIsNumber","isSymbol","setIsSymbol","len","setLen","useEffect","console","log","className","id","type","name","value","placeholder","readOnly","onClick","e","pass","document","getElementById","focus","select","msg","execCommand","err","role","aria-label","re","randexp","RandExp","gen","onChange","target","match","htmlFor","checked","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.800088b8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport RandExp from \"randexp\";\nimport \"./App.css\";\n\nfunction App() {\n  const [password, setPassword] = useState(\"\");\n  const [isUppercase, setIsUppercase] = useState(true);\n  const [isLowercase, setIsLowercase] = useState(true);\n  const [isNumber, setIsNumber] = useState(true);\n  const [isSymbol, setIsSymbol] = useState(true);\n  const [len, setLen] = useState(12);\n\n  useEffect(() => {}, []);\n\n  useEffect(() => {\n    console.log(\"pass\", password);\n    console.log(\"up\", isUppercase);\n    console.log(\"low\", isLowercase);\n    console.log(\"num\", isNumber);\n    console.log(\"sym\", isSymbol);\n    console.log(\"len\", len);\n  }, [password, isUppercase, isLowercase, isNumber, isSymbol, len]);\n\n  return (\n    <div className=\"container\">\n      <div id=\"result\">\n        <input\n          type=\"text\"\n          name=\"password\"\n          id=\"password\"\n          value={password}\n          placeholder=\"generated password\"\n          readOnly\n        />\n        <button\n          id=\"copy\"\n          onClick={(e) => {\n            let pass = document.getElementById(\"password\");\n            pass.focus();\n            pass.select();\n\n            try {\n              let successful = document.execCommand(\"copy\");\n              let msg = successful ? \"successful\" : \"unsuccessful\";\n              console.log(\"Copying text command was \" + msg);\n            } catch (err) {\n              console.log(\"Oops, unable to copy\");\n            }\n          }}\n        >\n          <span role=\"img\" aria-label=\"clipboard\">\n            &#128203;\n          </span>\n        </button>\n        <button\n          id=\"generate\"\n          onClick={() => {\n            let re = \"\";\n            if (isLowercase) re += \"a-z\";\n            if (isUppercase) re += \"A-Z\";\n            if (isNumber) re += \"0-9\";\n            if (isSymbol) re += \"$!@#%?&.\";\n            if (len !== \"\" && len >= 0) {\n              let randexp = new RandExp(`[${re}]{${len}}`);\n              setPassword(randexp.gen());\n            }\n          }}\n        >\n          Generate\n        </button>\n      </div>\n      <div id=\"options\">\n        <div className=\"option\">\n          <input\n            type=\"text\"\n            id=\"length\"\n            name=\"length\"\n            value={len}\n            onChange={(e) => {\n              if (e.target.value.match(/[0-9]*/)) setLen(e.target.value);\n            }}\n          />\n          <label htmlFor=\"isUppercase\"> Length </label>\n        </div>\n        <div className=\"option\">\n          <input\n            type=\"checkbox\"\n            id=\"uppercase\"\n            name=\"uppercase\"\n            checked={isUppercase}\n            onChange={() => setIsUppercase(!isUppercase)}\n          />\n          <label htmlFor=\"uppercase\"> Include uppercase letters</label>\n        </div>\n        <div className=\"option\">\n          <input\n            type=\"checkbox\"\n            id=\"lowercase\"\n            name=\"lowercase\"\n            checked={isLowercase}\n            onChange={() => setIsLowercase(!isLowercase)}\n          />\n          <label htmlFor=\"lowercase\"> Include lowercase letters</label>\n        </div>\n        <div className=\"option\">\n          <input\n            type=\"checkbox\"\n            id=\"number\"\n            name=\"number\"\n            checked={isNumber}\n            onChange={() => setIsNumber(!isNumber)}\n          />\n          <label htmlFor=\"number\"> Include numbers</label>\n        </div>\n        <div className=\"option\">\n          <input\n            type=\"checkbox\"\n            id=\"symbol\"\n            name=\"symbol\"\n            checked={isSymbol}\n            onChange={() => setIsSymbol(!isSymbol)}\n          />\n          <label htmlFor=\"symbol\"> Include symbols</label>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}